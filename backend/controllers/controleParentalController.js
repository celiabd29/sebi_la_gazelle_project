const fs = require("fs");
const path = require("path");
const Utilisateur = require("../models/Utilisateur"); // ‚úÖ AJOUT

// üîê V√©rifie si le code saisi est correct
exports.verifierCode = async (req, res) => {
  const { userId, code } = req.body;

  console.log("üîê V√©rification re√ßue :", { userId, code });

  if (!userId || !code) {
    return res
      .status(400)
      .json({ success: false, message: "userId et code requis" });
  }

  try {
    const utilisateur = await Utilisateur.findById(userId);

    if (!utilisateur) {
      return res
        .status(404)
        .json({ success: false, message: "Utilisateur non trouv√©" });
    }

    const codeValide = String(utilisateur.codeParental) === String(code);

    if (codeValide) {
      return res.status(200).json({
        success: true,
        autoris√©: true,
        message: "Code correct",
      });
    } else {
      return res.status(200).json({
        success: false,
        autoris√©: false,
        message: "Code incorrect",
      });
    }
  } catch (error) {
    console.error("‚ùå Erreur serveur :", error.message);
    return res.status(500).json({
      success: false,
      message: "Erreur serveur",
    });
  }
};

// üîÅ V√©rifie si l'acc√®s est encore valide
exports.estAutoris√© = (req, res) => {
  const now = new Date();
  if (global.acc√®sAutoris√©Jusqu && now < global.acc√®sAutoris√©Jusqu) {
    return res.status(200).json({ autoris√©: true });
  }
  return res.status(200).json({ autoris√©: false });
};

// ‚úèÔ∏è Permet de changer dynamiquement le code parental
exports.changerCode = (req, res) => {
  const { nouveauCode } = req.body;

  if (!nouveauCode || typeof nouveauCode !== "string") {
    return res.status(400).json({
      success: false,
      message: "Code invalide. Il doit √™tre une cha√Æne de caract√®res.",
    });
  }

  const dataPath = path.join(__dirname, "../data/code_parent.json");

  try {
    fs.writeFileSync(dataPath, JSON.stringify({ code: nouveauCode }, null, 2));
    console.log("‚úÖ Nouveau code parent enregistr√© :", nouveauCode);
    return res.status(200).json({ success: true, message: "Code mis √† jour" });
  } catch (err) {
    console.error("‚ùå Erreur √©criture code_parent.json :", err.message);
    return res.status(500).json({
      success: false,
      message: "Erreur serveur lors de l'enregistrement",
    });
  }
};